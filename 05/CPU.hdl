// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=Ainstruction);
    Not(in=Ainstruction,out=Cinstruction);

    //A
    And(a=Cinstruction, b=instruction[5], out=outa);
    Mux16(a=instr, b=aluout, sel=instruction[15],out=nexta);
    Or(a=Ainstruction, b=outa, out=loada);
    ARegister(in=nexta, load=loada, out=aout);

    //D
    And(a=instruction[4],b=Cinstruction,out=loadd);
    DRegister(in=alu,load=loadd,out=d);

    Mux16(a=a, b=b, sel=instruction[12], out=mout);
    And(a=instruction[11..6], b=true, out=aluout);
    ALU(x=d,y=mout,aluout=aluout,out=alu,ar=ar,ag=ag);

    Not(in=ar,out=nar);
    Not(in=ag, out=nag);
    And(a=nar, b=nag, out=pos);
    And(a=instruction[2],b=ag, out=aj);
    And(a=instruction[1], b=ar, out=az);
    And(a=instruction[0], b=pos,out=jpos);
    Or(a=aj,b=az,out=ajz);
    Or(a=ajz,b=jpos,out=jumpcond);
    And(a=Cinstruction,b=jumpcond,out=sjump);

    And(a=Cinstruction, b=instruction[3], out=writeM);
    And16(a=a,b=true, out[0..14]=addressM);
    And16(a=alu,b=true,out=outM);
    PC(in=a,load=sjump,inc=true,reset=reset,out[0..14]=pc);


}